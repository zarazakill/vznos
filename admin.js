document.addEventListener('DOMContentLoaded', function() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (localStorage.getItem('adminAuthenticated') !== 'true') {
        window.location.href = 'login.html';
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏ (24 —á–∞—Å–∞)
    const loginTime = parseInt(localStorage.getItem('adminLoginTime') || '0');
    if (Date.now() - loginTime > 24 * 60 * 60 * 1000) {
        logout();
        return;
    }

    let plotData = [];
    let editingIndex = -1;
    const MEMBERSHIP_TARIFF = 1400; // 1400 —Ä—É–± –∑–∞ —Å–æ—Ç–∫—É

    // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const logoutBtn = document.getElementById('logoutBtn');
    const addPlotBtn = document.getElementById('addPlotBtn');
    const exportDataBtn = document.getElementById('exportDataBtn');
    const exportExcelBtn = document.getElementById('exportExcelBtn');
    const importDataBtn = document.getElementById('importDataBtn');
    const importExcelBtn = document.getElementById('importExcelBtn');
    const importFileInput = document.getElementById('importFileInput');
    const importExcelInput = document.getElementById('importExcelInput');
    const massReceiptBtn = document.getElementById('massReceiptBtn');
    const plotDataTable = document.getElementById('plotDataTable').getElementsByTagName('tbody')[0];
    const changePasswordForm = document.getElementById('changePasswordForm');

    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    const editPlotModal = document.getElementById('editPlotModal');
    const massReceiptModal = document.getElementById('massReceiptModal');
    const massReceiptPrintModal = document.getElementById('massReceiptPrintModal');

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    loadPlotData();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    logoutBtn.addEventListener('click', logout);
    addPlotBtn.addEventListener('click', () => openEditModal());
    exportDataBtn.addEventListener('click', exportData);
    exportExcelBtn.addEventListener('click', exportExcel);
    importDataBtn.addEventListener('click', () => importFileInput.click());
    importExcelBtn.addEventListener('click', () => importExcelInput.click());
    importFileInput.addEventListener('change', importData);
    importExcelInput.addEventListener('change', importExcel);
    massReceiptBtn.addEventListener('click', openMassReceiptModal);
    if (changePasswordForm) {
        changePasswordForm.addEventListener('submit', changePassword);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    document.querySelectorAll('.close-modal').forEach(btn => {
        btn.addEventListener('click', function() {
            this.closest('.modal').style.display = 'none';
        });
    });

    document.getElementById('editPlotForm').addEventListener('submit', savePlot);
    if (document.getElementById('selectAllPlots')) {
        document.getElementById('selectAllPlots').addEventListener('change', toggleSelectAllPlots);
    }
    if (document.getElementById('generateMassReceiptsBtn')) {
        document.getElementById('generateMassReceiptsBtn').addEventListener('click', generateMassReceipts);
    }
    if (document.getElementById('printMassReceiptsBtn')) {
        document.getElementById('printMassReceiptsBtn').addEventListener('click', () => {
            // Add a small delay to allow browser to render content before printing
            setTimeout(() => {
                window.print();
            }, 100); 
        });
    }

    // –§—É–Ω–∫—Ü–∏–∏
    function logout() {
        localStorage.removeItem('adminAuthenticated');
        localStorage.removeItem('adminLoginTime');
        window.location.href = 'login.html';
    }

    async function loadPlotData() {
        try {
            const response = await fetch('data.json');
            const data = await response.json();
            plotData = data.filter(plot => plot.plotNumber && plot.payerName); // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
            renderTable();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
        }
    }

    function renderTable() {
        plotDataTable.innerHTML = '';
        plotData.forEach((plot, index) => {
            const row = plotDataTable.insertRow();
            row.innerHTML = `
                <td><span class="editable-cell" data-field="plotNumber" data-index="${index}">${plot.plotNumber}</span></td>
                <td><span class="editable-cell" data-field="payerName" data-index="${index}">${plot.payerName}</span></td>
                <td><span class="editable-cell" data-field="membershipSum" data-index="${index}">${((plot.plotSotkas || 0) * MEMBERSHIP_TARIFF).toFixed(2)}</span></td>
                <td><span class="editable-cell" data-field="plotSotkas" data-index="${index}">${(plot.plotSotkas || 0).toFixed(2)}</span></td>
                <td><span class="editable-cell" data-field="targetSum" data-index="${index}">${plot.targetSum || 0}</span></td>
                <td><span class="editable-cell" data-field="meterReadingPrev" data-index="${index}">${plot.meterReadingPrev || 0}</span></td>
                <td><span class="editable-cell" data-field="meterReadingCurr" data-index="${index}">${plot.meterReadingCurr || 0}</span></td>
                <td class="table-actions">
                    <button onclick="openEditModal(${index})" class="edit-btn">‚úèÔ∏è</button>
                    <button onclick="deletePlot(${index})" class="delete-btn">üóëÔ∏è</button>
                </td>
            `;
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è—á–µ–µ–∫
        document.querySelectorAll('.editable-cell').forEach(cell => {
            cell.addEventListener('click', function() {
                if (this.querySelector('input')) return; // –£–∂–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è
                
                const field = this.dataset.field;
                const index = parseInt(this.dataset.index);
                const currentValue = this.textContent;
                
                // –°–æ–∑–¥–∞–µ–º input –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                const input = document.createElement('input');
                input.type = field.includes('Sum') || field.includes('Sotkas') || field.includes('Reading') ? 'number' : 'text';
                if (input.type === 'number') {
                    input.step = field.includes('Sotkas') || field.includes('Sum') ? '0.01' : '1';
                    input.min = '0';
                }
                input.value = currentValue;
                input.style.width = '100%';
                input.style.border = '1px solid var(--primary-color)';
                
                this.innerHTML = '';
                this.appendChild(input);
                input.focus();
                input.select();
                
                const saveEdit = () => {
                    const newValue = input.type === 'number' ? parseFloat(input.value) || 0 : input.value.trim();
                    
                    if (field === 'membershipSum') {
                        // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è —Å—É–º–º–∞ —á–ª–µ–Ω—Å–∫–∏—Ö –≤–∑–Ω–æ—Å–æ–≤, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ—Ç–∫–∏
                        plotData[index].plotSotkas = newValue / MEMBERSHIP_TARIFF;
                    } else {
                        plotData[index][field] = newValue;
                    }
                    
                    saveDataToLocalStorage();
                    renderTable();
                    showNotification('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success');
                };
                
                const cancelEdit = () => {
                    this.textContent = currentValue;
                };
                
                input.addEventListener('blur', saveEdit);
                input.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter') {
                        saveEdit();
                    } else if (e.key === 'Escape') {
                        cancelEdit();
                    }
                });
            });
        });
    }

    function openEditModal(index = -1) {
        editingIndex = index;
        const modal = editPlotModal;
        const form = document.getElementById('editPlotForm');
        
        if (index >= 0) {
            const plot = plotData[index];
            document.getElementById('editModalTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–æ–∫';
            document.getElementById('editPlotNumber').value = plot.plotNumber;
            document.getElementById('editPayerName').value = plot.payerName;
            document.getElementById('editPlotSotkas').value = plot.plotSotkas || '';
            document.getElementById('editTargetSum').value = plot.targetSum || '';
            document.getElementById('editMeterReading').value = plot.meterReadingPrev || '';
            document.getElementById('editMeterReadingCurr').value = plot.meterReadingCurr || '';
        } else {
            document.getElementById('editModalTitle').textContent = '–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–æ–∫';
            form.reset();
        }
        
        modal.style.display = 'block';
    }

    function savePlot(e) {
        e.preventDefault();
        
        const plotData_new = {
            plotNumber: document.getElementById('editPlotNumber').value.trim(),
            payerName: document.getElementById('editPayerName').value.trim(),
            plotSotkas: parseFloat(document.getElementById('editPlotSotkas').value) || 0,
            targetSum: parseFloat(document.getElementById('editTargetSum').value) || 0,
            meterReadingPrev: parseFloat(document.getElementById('editMeterReading').value) || 0,
            meterReadingCurr: parseFloat(document.getElementById('editMeterReadingCurr').value) || 0
        };

        if (editingIndex >= 0) {
            plotData[editingIndex] = plotData_new;
        } else {
            plotData.push(plotData_new);
        }

        saveDataToLocalStorage();
        renderTable();
        closeEditModal();
        showNotification('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
    }

    function deletePlot(index) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–∫–∞?')) {
            plotData.splice(index, 1);
            saveDataToLocalStorage();
            renderTable();
            showNotification('–£—á–∞—Å—Ç–æ–∫ —É–¥–∞–ª–µ–Ω', 'success');
        }
    }

    function saveDataToLocalStorage() {
        localStorage.setItem('plotData', JSON.stringify(plotData));
    }

    function exportData() {
        const dataStr = JSON.stringify(plotData, null, 2);
        const dataBlob = new Blob([dataStr], {type: 'application/json'});
        const url = URL.createObjectURL(dataBlob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `snt_berezka_data_${new Date().toISOString().split('T')[0]}.json`;
        link.click();
        URL.revokeObjectURL(url);
        showNotification('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ JSON', 'success');
    }

    function exportExcel() {
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        const exportData = plotData.map(plot => ({
            '–ù–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞': plot.plotNumber,
            '–§–ò–û –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞': plot.payerName,
            '–†–∞–∑–º–µ—Ä —É—á–∞—Å—Ç–∫–∞ (—Å–æ—Ç–æ–∫)': plot.plotSotkas || 0,
            '–¶–µ–ª–µ–≤—ã–µ –≤–∑–Ω–æ—Å—ã (—Ä—É–±.)': plot.targetSum || 0,
            '–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è': plot.meterReadingPrev || 0,
            '–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è': plot.meterReadingCurr || 0
        }));

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–∏–≥—É Excel
        const wb = XLSX.utils.book_new();
        const ws = XLSX.utils.json_to_sheet(exportData);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏—Å—Ç –≤ –∫–Ω–∏–≥—É
        XLSX.utils.book_append_sheet(wb, ws, '–£—á–∞—Å—Ç–∫–∏ –°–ù–¢ –ë–µ—Ä–µ–∑–∫–∞-2');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        const fileName = `snt_berezka_data_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(wb, fileName);
        
        showNotification('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ XLSX', 'success');
    }

    function importData(e) {
        const file = e.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = function(e) {
            try {
                const importedData = JSON.parse(e.target.result);
                if (Array.isArray(importedData)) {
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ meterReadingCurr –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    const updatedData = importedData.map(plot => ({
                        ...plot,
                        meterReadingCurr: plot.meterReadingCurr || plot.meterReadingPrev || 0
                    }));
                    plotData = updatedData;
                    saveDataToLocalStorage();
                    renderTable();
                    showNotification('–î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ JSON', 'success');
                } else {
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
                }
            } catch (error) {
                showNotification('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ' + error.message, 'error');
            }
        };
        reader.readAsText(file);
    }

    function importExcel(e) {
        const file = e.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = function(e) {
            try {
                const data = new Uint8Array(e.target.result);
                const workbook = XLSX.read(data, {type: 'array'});
                
                // –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
                const firstSheetName = workbook.SheetNames[0];
                const worksheet = workbook.Sheets[firstSheetName];
                
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON
                const jsonData = XLSX.utils.sheet_to_json(worksheet);
                
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                const importedData = jsonData.map(row => ({
                    plotNumber: String(row['–ù–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞'] || row.plotNumber || ''),
                    payerName: String(row['–§–ò–û –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞'] || row.payerName || ''),
                    plotSotkas: Number(row['–†–∞–∑–º–µ—Ä —É—á–∞—Å—Ç–∫–∞ (—Å–æ—Ç–æ–∫)'] || row.plotSotkas || 0),
                    targetSum: Number(row['–¶–µ–ª–µ–≤—ã–µ –≤–∑–Ω–æ—Å—ã (—Ä—É–±.)'] || row.targetSum || 0),
                    meterReadingPrev: Number(row['–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è'] || row.meterReadingPrev || 0),
                    meterReadingCurr: Number(row['–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è'] || row.meterReadingCurr || row.meterReadingPrev || 0)
                })).filter(plot => plot.plotNumber && plot.payerName); // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
                
                if (importedData.length > 0) {
                    plotData = importedData;
                    saveDataToLocalStorage();
                    renderTable();
                    showNotification(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${importedData.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ XLSX`, 'success');
                } else {
                    throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
                }
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Excel:', error);
                showNotification('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ XLSX: ' + error.message, 'error');
            }
        };
        reader.readAsArrayBuffer(file);
    }

    function openMassReceiptModal() {
        const modal = massReceiptModal;
        const checkboxList = document.getElementById('plotCheckboxList');
        
        if (!checkboxList) return;
        
        checkboxList.innerHTML = '';
        plotData.forEach((plot, index) => {
            if (plot.plotNumber && plot.payerName) {
                const checkbox = document.createElement('label');
                checkbox.className = 'checkbox-label';
                checkbox.innerHTML = `
                    <input type="checkbox" value="${index}" class="plot-checkbox">
                    –£—á–∞—Å—Ç–æ–∫ ${plot.plotNumber} - ${plot.payerName}
                `;
                checkboxList.appendChild(checkbox);
            }
        });
        
        modal.style.display = 'block';
    }

    function toggleSelectAllPlots() {
        const selectAll = document.getElementById('selectAllPlots');
        const checkboxes = document.querySelectorAll('.plot-checkbox');
        checkboxes.forEach(cb => cb.checked = selectAll.checked);
    }

    async function generateMassReceipts() {
        const selectedCheckboxes = document.querySelectorAll('.plot-checkbox:checked');
        if (selectedCheckboxes.length === 0) {
            showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —É—á–∞—Å—Ç–æ–∫', 'error');
            return;
        }

        const selectedIndices = Array.from(selectedCheckboxes).map(cb => parseInt(cb.value));
        const receiptsContainer = document.getElementById('massReceiptContent');
        receiptsContainer.innerHTML = '';

        const ELECTRICITY_TARIFF = 3.5;

        for (let i = 0; i < selectedIndices.length; i += 2) {
            // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –¥–≤—É–º—è –∫–≤–∏—Ç–∞–Ω—Ü–∏—è–º–∏
            const pageDiv = document.createElement('div');
            pageDiv.className = 'receipt-page';
            
            // –ü–µ—Ä–≤–∞—è –∫–≤–∏—Ç–∞–Ω—Ü–∏—è
            const index1 = selectedIndices[i];
            const plot1 = plotData[index1];
            if (plot1.plotNumber && plot1.payerName) {
                const receipt1 = await createReceiptForPlot(plot1, ELECTRICITY_TARIFF);
                pageDiv.appendChild(receipt1);
            }
            
            // –í—Ç–æ—Ä–∞—è –∫–≤–∏—Ç–∞–Ω—Ü–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (i + 1 < selectedIndices.length) {
                const index2 = selectedIndices[i + 1];
                const plot2 = plotData[index2];
                if (plot2.plotNumber && plot2.payerName) {
                    const receipt2 = await createReceiptForPlot(plot2, ELECTRICITY_TARIFF);
                    pageDiv.appendChild(receipt2);
                }
            }
            
            receiptsContainer.appendChild(pageDiv);
        }

        massReceiptModal.style.display = 'none';
        massReceiptPrintModal.style.display = 'block';
    }

    async function createReceiptForPlot(plot, ELECTRICITY_TARIFF) {
        const formData = {
            plotNumber: plot.plotNumber,
            payerName: plot.payerName,
            paymentTypes: [],
            totalAmount: 0,
            membershipSum: 0,
            targetSum: 0,
            electricitySum: 0
        };

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã
        if (plot.plotSotkas > 0) {
            formData.membershipSum = plot.plotSotkas * MEMBERSHIP_TARIFF;
            formData.paymentTypes.push('–ß–ª–µ–Ω—Å–∫–∏–µ –≤–∑–Ω–æ—Å—ã');
            formData.totalAmount += formData.membershipSum;
        }

        if (plot.targetSum > 0) {
            formData.targetSum = plot.targetSum;
            formData.paymentTypes.push('–¶–µ–ª–µ–≤—ã–µ –≤–∑–Ω–æ—Å—ã');
            formData.totalAmount += formData.targetSum;
        }

        if (plot.meterReadingCurr && plot.meterReadingPrev && plot.meterReadingCurr > plot.meterReadingPrev) {
            const usage = plot.meterReadingCurr - plot.meterReadingPrev;
            formData.electricitySum = usage * ELECTRICITY_TARIFF;
            formData.paymentTypes.push('–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è');
            formData.totalAmount += formData.electricitySum;
        }

        if (formData.totalAmount > 0) {
            const today = new Date();
            const formattedDate = today.toLocaleDateString('ru-RU');
            const amountInWords = numberToWords(formData.totalAmount);

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥
            const qrCodeDataURL = await generateQrCodeDataURLForReceipt(formData);

            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏
            const receiptDiv = document.createElement('div');
            receiptDiv.className = 'mass-receipt-item';
            receiptDiv.innerHTML = 
                createReceiptPart('–ò–∑–≤–µ—â–µ–Ω–∏–µ', formData, amountInWords, formattedDate, qrCodeDataURL) +
                '<div class="receipt-tear-line"></div>' +
                createReceiptPart('–ö–≤–∏—Ç–∞–Ω—Ü–∏—è', formData, amountInWords, formattedDate, null);
            
            return receiptDiv;
        }
        
        return document.createElement('div');
    }

    function changePassword(e) {
        e.preventDefault();
        
        const currentPassword = document.getElementById('currentPassword').value;
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;
        
        const savedCredentials = JSON.parse(localStorage.getItem('adminCredentials') || '{"username": "admin", "password": "admin"}');
        
        if (currentPassword !== savedCredentials.password) {
            showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å', 'error');
            return;
        }
        
        if (newPassword !== confirmPassword) {
            showNotification('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç', 'error');
            return;
        }
        
        if (newPassword.length < 4) {
            showNotification('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞', 'error');
            return;
        }
        
        savedCredentials.password = newPassword;
        localStorage.setItem('adminCredentials', JSON.stringify(savedCredentials));
        
        e.target.reset();
        showNotification('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω', 'success');
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    window.openEditModal = openEditModal;
    window.deletePlot = deletePlot;
    window.closeEditModal = () => editPlotModal.style.display = 'none';
    window.closeMassReceiptModal = () => massReceiptModal.style.display = 'none';

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏–π 
    async function generateQrCodeDataURLForReceipt(formData) {
        const REQUISITES = {
            Name: '–°–ù–¢ ¬´–ë–µ—Ä–µ–∑–∫–∞-2¬ª',
            PayeeINN: '5433118499',
            KPP: '543301001',
            BankName: '–°–∏–±–∏—Ä—Å–∫–∏–π –ë–∞–Ω–∫ –ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫',
            PersonalAcc: '40703810644050040322',
            BIC: '045004641',
            CorrespAcc: '30101810500000000641'
        };

        const totalAmountKopecks = (formData.totalAmount * 100).toFixed(0);
        let purposeParts = [];
        
        if (formData.membershipSum > 0) {
            purposeParts.push(`–ß–ª–µ–Ω—Å–∫–∏–µ –≤–∑–Ω–æ—Å—ã: ${formData.membershipSum.toFixed(2)} —Ä—É–±.`);
        }
        if (formData.targetSum > 0) {
            purposeParts.push(`–¶–µ–ª–µ–≤—ã–µ –≤–∑–Ω–æ—Å—ã: ${formData.targetSum.toFixed(2)} —Ä—É–±.`);
        }
        if (formData.electricitySum > 0) {
            purposeParts.push(`–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è: ${formData.electricitySum.toFixed(2)} —Ä—É–±.`);
        }
        
        const purposeString = purposeParts.join(', ') + ` –∑–∞ —É—á–∞—Å—Ç–æ–∫ ‚Ññ ${formData.plotNumber}, –§–ò–û: ${formData.payerName}`;

        const paymentString =
            `ST00012|Name=${REQUISITES.Name}` +
            `|PersonalAcc=${REQUISITES.PersonalAcc}` +
            `|BankName=${REQUISITES.BankName}` +
            `|BIC=${REQUISITES.BIC}` +
            `|CorrespAcc=${REQUISITES.CorrespAcc}` +
            `|PayeeINN=${REQUISITES.PayeeINN}` +
            `|KPP=${REQUISITES.KPP}` +
            `|Sum=${totalAmountKopecks}` +
            `|Purpose=${purposeString}`;

        try {
            return await QRCode.toDataURL(paymentString, { width: 90, errorCorrectionLevel: 'H' });
        } catch (error) {
            console.error('Error generating QR code:', error);
            return null;
        }
    }

    function createReceiptPart(title, data, amountInWords, formattedDate, qrCodeDataURL = null) {
        const purpose = data.paymentTypes.join(', ');
        
        let paymentDetails = [];
        if (data.membershipSum > 0) paymentDetails.push(`–ß–ª–µ–Ω—Å–∫–∏–µ –≤–∑–Ω–æ—Å—ã: ${data.membershipSum.toFixed(2)} —Ä—É–±.`);
        if (data.targetSum > 0) paymentDetails.push(`–¶–µ–ª–µ–≤—ã–µ –≤–∑–Ω–æ—Å—ã: ${data.targetSum.toFixed(2)} —Ä—É–±.`);
        if (data.electricitySum > 0) paymentDetails.push(`–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è: ${data.electricitySum.toFixed(2)} —Ä—É–±.`);
        
        const qrCodeHtml = (title === '–ò–∑–≤–µ—â–µ–Ω–∏–µ' && qrCodeDataURL) ?
            `<div class="receipt-qr-code-container">
                <img src="${qrCodeDataURL}" alt="QR Code" class="receipt-qr-code">
                <div class="receipt-qr-label">–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã</div>
            </div>` : '';

        return `
            <div class="receipt-part">
                <div class="receipt-main-content">
                    <div class="receipt-header">
                        <div class="receipt-form-number">
                            <span>–§–æ—Ä–º–∞ ‚Ññ –ü–î-4</span>
                        </div>
                    </div>
                    
                    <div class="receipt-field">
                        <div class="receipt-field-value">–°–ù–¢ ¬´–ë–µ—Ä–µ–∑–∫–∞-2¬ª</div>
                        <div class="receipt-field-label">(–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–ª–∞—Ç–µ–∂–∞)</div>
                    </div>
                    
                    <div class="receipt-row">
                        <div class="receipt-field" style="flex: 2;">
                            <div class="receipt-field-value">5433118499</div>
                            <div class="receipt-field-label">(–ò–ù–ù –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–ª–∞—Ç–µ–∂–∞)</div>
                        </div>
                        <div class="receipt-field" style="flex: 3;">
                            <div class="receipt-field-value">40703810644050040322</div>
                            <div class="receipt-field-label">(–Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–ª–∞—Ç–µ–∂–∞)</div>
                        </div>
                    </div>
                    
                    <div class="receipt-field">
                        <div class="receipt-field-value">–°–∏–±–∏—Ä—Å–∫–∏–π –ë–∞–Ω–∫ –ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫ –≥. –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫</div>
                        <div class="receipt-field-label">(–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–ª–∞—Ç–µ–∂–∞)</div>
                    </div>
                    
                    <div class="receipt-row">
                        <div class="receipt-field" style="flex: 1;">
                            <div class="receipt-field-value">045004641</div>
                            <div class="receipt-field-label">(–ë–ò–ö)</div>
                        </div>
                        <div class="receipt-field" style="flex: 2;">
                            <div class="receipt-field-value">30101810500000000641</div>
                            <div class="receipt-field-label">(–Ω–æ–º–µ—Ä –∫–æ—Ä./—Å—á. –±–∞–Ω–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–ª–∞—Ç–µ–∂–∞)</div>
                        </div>
                    </div>
                    
                    <div class="receipt-field">
                        <div class="receipt-field-value">${purpose} –∑–∞ —É—á–∞—Å—Ç–æ–∫ ‚Ññ ${data.plotNumber}</div>
                        <div class="receipt-field-label">(–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞)</div>
                    </div>
                    
                    <div class="receipt-field">
                        <div class="receipt-field-value">${data.payerName}</div>
                        <div class="receipt-field-label">(–§.–ò.–û. –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞, –∞–¥—Ä–µ—Å)</div>
                    </div>
                    
                    <div class="receipt-amount-section">
                        ${paymentDetails.map(detail => `<div class="receipt-amount-row"><span>${detail}</span></div>`).join('')}
                        <div class="receipt-total">–ò—Ç–æ–≥–æ –∫ –¥–æ–ø–ª–∞—Ç–µ: ${data.totalAmount.toFixed(2)} —Ä—É–±.</div>
                    </div>
                    
                    <div class="receipt-amount-words">
                        <strong>–°—É–º–º–∞ –ø—Ä–æ–ø–∏—Å—å—é:</strong> ${amountInWords}
                    </div>
                    
                    <div class="receipt-footer">
                        <div class="receipt-date-block">
                            <div>–î–∞—Ç–∞ ${formattedDate}</div>
                        </div>
                        <div class="receipt-signatures-block">
                            <div class="signature-entry">
                                <span class="sig-label">–ü–ª–∞—Ç–µ–ª—å—â–∏–∫ (–ø–æ–¥–ø–∏—Å—å)</span>
                                <span class="sig-line"></span>
                                <span class="sig-separator">/</span>
                                <span class="sig-decipher-line"></span>
                                <span class="sig-decipher-text">(—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞)</span>
                            </div>
                            <div class="signature-entry">
                                <span class="sig-label">–ö–∞—Å—Å–∏—Ä</span>
                                <span class="sig-line"></span>
                                <span class="sig-separator">/</span>
                                <span class="sig-decipher-line"></span>
                                <span class="sig-decipher-text">(—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞)</span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="receipt-right-frame">
                    <span class="receipt-title-right">${title}</span>
                    ${qrCodeHtml} 
                    <div class="cashier-label-right">–ö–∞—Å—Å–∏—Ä</div>
                </div>
            </div>
        `;
    }

    function numberToWords(num) {
        const units = ['', '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–µ—Ç—ã—Ä–µ', '–ø—è—Ç—å', '—à–µ—Å—Ç—å', '—Å–µ–º—å', '–≤–æ—Å–µ–º—å', '–¥–µ–≤—è—Ç—å'];
        const unitsFemale = ['', '–æ–¥–Ω–∞', '–¥–≤–µ', '—Ç—Ä–∏', '—á–µ—Ç—ã—Ä–µ', '–ø—è—Ç—å', '—à–µ—Å—Ç—å', '—Å–µ–º—å', '–≤–æ—Å–µ–º—å', '–¥–µ–≤—è—Ç—å'];
        const teens = ['–¥–µ—Å—è—Ç—å', '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å', '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å', '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å', '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å', '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å', '–≤–æ—Å–µ–º—å–Ω–∞–¥—Ü–∞—Ç—å', '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å'];
        const tens = ['', '–¥–µ—Å—è—Ç—å', '–¥–≤–∞–¥—Ü–∞—Ç—å', '—Ç—Ä–∏–¥—Ü–∞—Ç—å', '—Å–æ—Ä–æ–∫', '–ø—è—Ç—å–¥–µ—Å—è—Ç', '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç', '—Å–µ–º—å–¥–µ—Å—è—Ç', '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç', '–¥–µ–≤—è–Ω–æ—Å—Ç–æ'];
        const hundreds = ['', '—Å—Ç–æ', '–¥–≤–µ—Å—Ç–∏', '—Ç—Ä–∏—Å—Ç–∞', '—á–µ—Ç—ã—Ä–µ—Å—Ç–∞', '–ø—è—Ç—å—Å–æ—Ç', '—à–µ—Å—Ç—å—Å–æ—Ç', '—Å–µ–º—å—Å–æ—Ç', '–≤–æ—Å–µ–º—å—Å–æ—Ç', '–¥–µ–≤—è—Ç—å—Å–æ—Ç'];

        function convertLessThanOneThousand(n, isFemale) {
            if (n === 0) return '';
            let result = '';

            if (n >= 100) {
                result += hundreds[Math.floor(n / 100)] + ' ';
                n %= 100;
            }

            if (n >= 20) {
                result += tens[Math.floor(n / 10)] + ' ';
                n %= 10;
            } else if (n >= 10) {
                result += teens[n - 10] + ' ';
                n = 0;
            }

            if (n > 0) {
                result += (isFemale ? unitsFemale[n] : units[n]) + ' ';
            }

            return result.trim();
        }

        let rubles = Math.floor(num);
        let kopecks = Math.round((num - rubles) * 100);
        let result = '';

        if (rubles >= 1000) {
            const thousands = Math.floor(rubles / 1000);
            rubles %= 1000;

            result += convertLessThanOneThousand(thousands, true) + ' ';

            if (thousands % 100 >= 11 && thousands % 100 <= 19) {
                result += '—Ç—ã—Å—è—á ';
            } else {
                switch(thousands % 10) {
                    case 1: result += '—Ç—ã—Å—è—á–∞ '; break;
                    case 2:
                    case 3:
                    case 4: result += '—Ç—ã—Å—è—á–∏ '; break;
                    default: result += '—Ç—ã—Å—è—á ';
                }
            }
        }

        if (rubles > 0 || result === '') {
            result += convertLessThanOneThousand(rubles, false) + ' ';
        }

        if (rubles % 100 >= 11 && rubles % 100 <= 19) {
            result += '—Ä—É–±–ª–µ–π';
        } else {
            switch(rubles % 10) {
                case 1: result += '—Ä—É–±–ª—å'; break;
                case 2:
                case 3:
                case 4: result += '—Ä—É–±–ª—è'; break;
                default: result += '—Ä—É–±–ª–µ–π';
            }
        }

        kopecks = kopecks.toString().padStart(2, '0');
        result += ` ${kopecks} –∫–æ–ø.`;

        return result.charAt(0).toUpperCase() + result.slice(1);
    }

    function showNotification(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        toast.textContent = message;
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 24px;
            background: ${type === 'error' ? '#f44336' : (type === 'success' ? '#4CAF50' : '#2196F3')};
            color: white;
            border-radius: 44px; 
            z-index: 10000;
            max-width: 300px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s ease;
        `;
        
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.style.opacity = '1';
            toast.style.transform = 'translateX(0)';
        }, 10);
        
        setTimeout(() => {
            toast.style.opacity = '0';
            toast.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.remove();
                }
            }, 300);
        }, 5000);
    }
});